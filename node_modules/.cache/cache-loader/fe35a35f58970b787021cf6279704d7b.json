{"remainingRequest":"/var/www/vhosts/timon.cloud/docs.cnc.timon.cloud/cnc-docs/node_modules/babel-loader/lib/index.js??ref--4-1!/var/www/vhosts/timon.cloud/docs.cnc.timon.cloud/cnc-docs/node_modules/@docusaurus/theme-classic/src/theme/Navbar/index.js","dependencies":[{"path":"/var/www/vhosts/timon.cloud/docs.cnc.timon.cloud/cnc-docs/node_modules/@docusaurus/theme-classic/src/theme/Navbar/index.js","mtime":499162500000},{"path":"/var/www/vhosts/timon.cloud/docs.cnc.timon.cloud/cnc-docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/vhosts/timon.cloud/docs.cnc.timon.cloud/cnc-docs/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}